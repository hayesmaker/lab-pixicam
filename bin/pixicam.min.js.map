{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index","src/assert.js","src/camera-constrain.js","src/camera-pan.js","src/camera.js","src/math/point.js","src/math/rectangle.js","src/minimap-navigator.js","src/minimap.js","src/mixins/index.js","src/mixins/pixi.js","src/vendor/augment.js","src/vendor/gl-matrix.js","src/world.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixicam","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","core","Camera","World","Minimap","mixins","expression","message","augment","Point","CameraConstrains","defclass","constructor","options","maxZoom","minZoom","worldBounds","_active","clampZoom","zoom","limitToWorld","camera","viewport","getViewport","y","height","limit","x","width","update","Object","defineProperties","prototype","active","set","value","get","glmatrix","vec2","STATE","NONE","PAN","CameraPan","state","panStart","fromValues","panEnd","panDelta","panCamera","startAt","end","pan","dx","dy","speed","panLeft","panUp","distance","applyPan","subtract","copy","Rectangle","mat2d","screenWidth","screenHeight","_position","_positionLimited","_zoomPivot","_viewCenter","_zoom","_rotation","view","_viewport","transform","PIXI","Matrix","unfollow","followTarget","undefined","follow","target","getInverseMatrix","m","getMatrix","invert","cameraToWorldPoint","p","worldToScreen","worldToCameraPoint","screenToWorld","transformPoint","point","matrix","transformMat2d","tranformRect","rect","tl","br","worldRectToScreen","getViewSize","setScreenSize","ZERO","mat","identity","translate","position","scale","rotate","updateTransform","wt","b","c","d","tx","ty","defineProperty","add","toArray","reset","lengthSq","Math","sqrt","divideScalar","scalar","invScalar","clone","normalize","p1","p2","p11","p22","fromAngle","angle","magnitude","cos","sin","scaleWithPoint","ratioX","ratioY","bottom","right","halfWidth","halfHeight","round","MinimapNavigator","minimap","interactive","on","handleMouseDown","cameraPan","eventData","obj","mouseup","mouseupoutside","touchend","touchendoutside","handleMouseUp","mousemove","handleMouseMove","mouseToGlobal","data","toLocal","minimapToWorld","Container","uber","apply","arguments","minimapDimensions","worldBoundRect","viewportRect","items","build","navigator","Graphics","alpha","addChild","itemsLayer","debugLayer","object","push","drawObjects","clear","item","bounds","getLocalBounds","w1","h1","anchor","drawObject","worldRectToMinimap","drawRect","color","setWorldBounds","draw","getWorldToMinimapRatio","ratio","getRatios","base","world","baseWidth","baseHeight","worldWidth","worldHeight","worldToMinimap","min","max","newRect","worldPointToMinimap","drawViewport","drawWorldBounds","worldBoundsInMinimap","drawOrigin","hasOwnProperty","center","beginFill","endFill","graphics","lineStyle","drawPolygon","pixi","addContainerUpdates","mixinUpdateFunctions","j","children","preUpdate","postUpdate","body","factory","Factory","slice","Array","properties","concat","key","extend","_global","shim","GLMAT_EPSILON","GLMAT_ARRAY_TYPE","Float32Array","GLMAT_RANDOM","random","glMatrix","setMatrixArrayType","type","degree","PI","toRadian","create","out","sub","multiply","mul","divide","div","scaleAndAdd","dist","squaredDistance","sqrDist","len","squaredLength","sqrLen","negate","inverse","dot","cross","z","lerp","ax","ay","transformMat2","transformMat3","transformMat4","forEach","vec","stride","offset","count","fn","arg","str","vec3","az","bx","by","bz","zScale","w","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","rotateX","rotateY","rotateZ","tempA","tempB","cosine","acos","vec4","aw","mat2","transpose","a1","a0","a2","a3","det","adjoint","determinant","b0","b1","b2","b3","rad","v","v0","v1","frob","pow","LDU","L","D","U","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","mat3","fromMat4","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","mat4","axis","abs","fromRotationTranslation","xy","xz","yz","frustum","left","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","ortho","lr","bt","lookAt","eye","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","quat","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","setAxisAngle","setAxes","matr","fromMat3","bw","calculateW","slerp","omega","cosom","sinom","scale0","scale1","invDot","conjugate","fRoot","fTrace","k","CameraConstrain","Mixins","assert","worldRectangle","viewCenterX","viewCenterY","zoomPivotX","zoomPivotY","cameraConstrain","constrain","_screenWidth","_screenHeight","worldContainer","_showMinimap","destroyMinimap","_minimapInstance","removeGlobalChild","createMinimap","minimapInstance","addGlobalChild","setSize","child","removeChild","__updateMixed","updateWorldTransform","ct","pt","worldTransform","prepend","pivot","mixinUpdates"],"mappings":"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","file":"pixicam.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global){\nvar core = module.exports = {\n  Camera: require('./camera'),\n  World: require('./world'),\n  Minimap: require('./minimap'),\n  mixins: require('./mixins')\n};\n\nglobal.pixicam = core;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2FtZXJhOiByZXF1aXJlKCcuL2NhbWVyYScpLFxuICBXb3JsZDogcmVxdWlyZSgnLi93b3JsZCcpLFxuICBNaW5pbWFwOiByZXF1aXJlKCcuL21pbmltYXAnKSxcbiAgbWl4aW5zOiByZXF1aXJlKCcuL21peGlucycpXG59O1xuXG5nbG9iYWwucGl4aWNhbSA9IGNvcmU7Il19","module.exports = function (expression, message) {\n  if(!expression){\n    throw new Error(message);\n  }\n}","var augment = require('./vendor/augment'),\n  glmatrix = require('./vendor/gl-matrix'),\n  Rectangle = require('./math/rectangle'),\n  Point = require('./math/point');\n\nvar CameraConstrains = augment.defclass({\n  constructor: function(options){\n    this.maxZoom = options.maxZoom || 5;\n    this.minZoom = options.minZoom || 0.1;\n    this.worldBounds = options.worldBounds;\n\n    this._active = true;\n  },\n\n  clampZoom: function(zoom){\n    if(zoom > this.maxZoom){\n      return this.maxZoom;\n    }\n    if(zoom < this.minZoom){\n      return this.minZoom;\n    }\n\n    return zoom;\n  },\n  \n  limitToWorld: function(camera){\n    var point = new Point();\n    var viewport = camera.getViewport();\n    var worldBounds = this.worldBounds;\n\n    if(viewport.y + viewport.height > worldBounds.y + worldBounds.height){\n      var limit = camera.y + ((worldBounds.y + worldBounds.height) - (viewport.y + viewport.height));\n      camera.y =  limit;\n    }\n    \n\n    if(viewport.x < worldBounds.x){\n      var limit = camera.x + (worldBounds.x - viewport.x);\n      camera.x =  limit;\n    }\n    \n    if(viewport.x + viewport.width > worldBounds.x + worldBounds.width){\n      var limit = camera.x + ((worldBounds.x + worldBounds.width) - (viewport.x + viewport.width));\n      camera.x =  limit;\n    }\n    \n    if(viewport.y < worldBounds.y){\n      var limit = camera.y + (worldBounds.y - viewport.y);\n      camera.y =  limit;\n    }\n  },\n\n  update: function(camera){\n    if(!this._active) return;\n    \n    camera.zoom = this.clampZoom(camera.zoom);\n    this.limitToWorld(camera);\n  }\n});\n\n\n\nObject.defineProperties(CameraConstrains.prototype, {\n  active: {\n    set: function (value){ this._active = value; },\n    get: function (){ return this._active; }\n  }\n});\n\n\nmodule.exports = CameraConstrains;","var augment = require('./vendor/augment'),\n  glmatrix = require('./vendor/gl-matrix'),\n  Rectangle = require('./math/rectangle'),\n  Point = require('./math/point');\n\n  var vec2 = glmatrix.vec2;\n  var STATE = { NONE : -1, PAN : 2};\n\n  var CameraPan = augment.defclass({\n    constructor: function(camera){\n\n      this.camera = camera;\n      \n      this.state = STATE.NONE;\n      this.panStart = vec2.fromValues(0,0);\n      this.panEnd = vec2.fromValues(0,0);\n      this.panDelta = vec2.fromValues(0,0);\n      this.panCamera = vec2.fromValues(0,0);\n    },\n\n    startAt: function(x, y){\n      this.state = STATE.PAN;\n      vec2.set(this.panStart, x, y);\n\n    },\n\n    end: function(){\n      this.state = STATE.NONE;\n    },\n\n    pan: function(dx, dy, speed){\n      if(this.state == STATE.NONE) return;\n      \n      speed = speed || 1;\n      this.panLeft( dx * speed);\n      this.panUp( dy * speed);\n    },\n    \n    panLeft : function(distance){\n      this.panCamera[0] = distance;\n    },\n    \n    panUp : function(distance){\n      this.panCamera[1] = distance;\n    },\n\n    applyPan: function(x,y, speed){\n      vec2.set(this.panEnd, x, y);\n      vec2.subtract(this.panDelta, this.panStart, this.panEnd);\n      this.pan(this.panDelta[0], this.panDelta[1], this.camera.zoom);\n      vec2.copy(this.panStart, this.panEnd);\n    },\n    \n    update: function(){\n      var zoom = this.camera.zoom;\n      this.camera.x += this.panCamera[0]/zoom;\n      this.camera.y += this.panCamera[1]/zoom;\n      vec2.set(this.panCamera, 0, 0);\n    }\n  });\n\nmodule.exports = CameraPan;\n","var augment = require('./vendor/augment'),\n  glmatrix = require('./vendor/gl-matrix'),\n  Rectangle = require('./math/rectangle'),\n  Point = require('./math/point');\n  \nvar mat2d = glmatrix.mat2d;\nvar vec2 = glmatrix.vec2;\n\nvar Camera = augment.defclass({\n  constructor: function(screenWidth, screenHeight){\n\n    this._position = new Point(0, 0);\n    this._positionLimited = new Point(0, 0);\n    this._zoomPivot = new Point(0, 0);\n    this._viewCenter = new Point(0, 0);\n    this._zoom = 1;\n    this._rotation = 0;\n\n    this.view = new Rectangle(0,0, screenWidth, screenHeight);\n    //calculated world viewport\n    this._viewport = new Rectangle(0, 0, 0, 0);\n\n    this.transform = new PIXI.Matrix();\n  },\n  \n  unfollow: function(){\n    this.followTarget = undefined;\n  },\n\n  follow: function(target){\n    this.followTarget = target;\n  },\n\n  getInverseMatrix: function(){\n    var m = this.getMatrix();\n    return mat2d.invert([], m);\n  },\n  \n  cameraToWorldPoint: function(p){\n    return this.worldToScreen(p);\n  },\n\n  worldToCameraPoint: function(p){\n    return this.screenToWorld(p);\n  },\n\n  transformPoint: function(point, matrix){\n    var p = [point.x, point.y];\n    p = vec2.transformMat2d([], p, matrix);\n\n    return {x: p[0], y: p[1]};\n  },\n\n  worldToScreen: function(point){\n    return this.transformPoint(point, this.getMatrix());\n  },\n\n  screenToWorld: function(point){\n    return this.transformPoint(point, this.getInverseMatrix());\n  },\n\n  tranformRect: function(rect, matrix){\n    //calculate our camera window to the world view\n    var tl = this.transformPoint(rect.tl, matrix);\n    var br = this.transformPoint({x: rect.width, y: rect.height}, matrix);\n\n    return new Rectangle(tl.x, tl.y,br.x-tl.x,br.y-tl.y);\n  },\n  worldRectToScreen: function(rect){\n    return this.tranformRect(rect, this.getInverseMatrix());\n  },\n\n  getViewSize: function(){\n    return this.view;\n  },\n  \n  setScreenSize: function(width, height){\n    this.view.width = width;\n    this.view.height = height;\n  },\n\n  getViewport: function(){\n    //calculate our camera window to the world view\n    var tl = this.worldToScreen(Point.ZERO);\n    var br = this.worldToScreen({x: this.view.width, y: this.view.height});\n\n    this._viewport.set(tl.x, tl.y, (br.x-tl.x),(br.y-tl.y));\n    \n    //remove the view center ?\n    //this._viewport.set(tl.x + this._viewCenter.x, tl.y + this._viewCenter.y, (br.x-tl.x),(br.y-tl.y));\n    \n    return this._viewport;\n  },\n\n  getMatrix: function(){\n    var mat = mat2d.identity([]);\n    mat2d.translate(mat, mat, [this._zoomPivot.x, this._zoomPivot.y ]);\n    \n    var position = [this._position.x, this._position.y];\n    this.view.x = this._position.x;\n    this.view.y = this._position.y;\n\n    mat2d.translate(mat, mat, [-this._viewCenter.x, -this._viewCenter.y]); //apply position\n    mat2d.translate(mat, mat, position); //apply position\n    mat2d.scale(mat, mat, [1/this.zoom, 1/this.zoom]); //apply camera zoom\n    mat2d.rotate(mat, mat, this._rotation); //apply camera zoom\n    mat2d.translate(mat, mat, [-this._zoomPivot.x, -this._zoomPivot.y ]);\n\n    return mat;\n  },\n  update: function(){\n    if(this.followTarget){\n      this.x = this.followTarget.x;\n      this.y = this.followTarget.y;\n    }\n\n    this.updateTransform();\n  },\n\n  updateTransform: function(){\n    var mat = this.getInverseMatrix();\n    var wt = this.transform;\n\n    wt.a  = mat[0];\n    wt.b  = mat[1];\n    wt.c  = mat[2];\n    wt.d  = mat[3];\n    wt.tx = mat[4];\n    wt.ty = mat[5];\n  }\n});\n\n\nObject.defineProperty(Camera.prototype, 'zoom', {\n\n    get: function () {\n        return this._zoom;\n    },\n\n    set: function (value) {\n\n        //never smaller fro the moment\n        if(value < 0.1){\n          value = 0.1;\n        }\n\n        this._zoom = value;\n    }\n\n});\n\nObject.defineProperty(Camera.prototype, 'viewCenterX', {\n\n    get: function () {\n        return this._viewCenter.x;\n    },\n\n    set: function (value) {\n        this._viewCenter.x = value;\n    }\n\n});\n\n\nObject.defineProperty(Camera.prototype, 'viewCenterY', {\n\n    get: function () {\n        return this._viewCenter.y;\n    },\n\n    set: function (value) {\n        this._viewCenter.y = value;\n    }\n\n});\n\n\nObject.defineProperty(Camera.prototype, 'zoomPivotX', {\n\n    get: function () {\n        return this._zoomPivot.x;\n    },\n\n    set: function (value) {\n        this._zoomPivot.x = value;\n    }\n\n});\n\n\nObject.defineProperty(Camera.prototype, 'zoomPivotY', {\n\n    get: function () {\n        return this._zoomPivot.y;\n    },\n\n    set: function (value) {\n        this._zoomPivot.y = value;\n    }\n\n});\n\nObject.defineProperty(Camera.prototype, 'x', {\n\n    get: function () {\n        return this._position.x;\n    },\n\n    set: function (value) {\n        this._position.x = value;\n    }\n\n});\n\nObject.defineProperty(Camera.prototype, 'y', {\n\n    get: function () {\n        return this._position.y;\n    },\n\n    set: function (value) {\n\n        this._position.y = value;\n    }\n\n});\n\nObject.defineProperty(Camera.prototype, 'rotation', {\n\n    get: function () {\n        return this._rotation;\n    },\n\n    set: function (value) {\n\n        this._rotation = value;\n    }\n\n});\n\nmodule.exports = Camera;","var augment = require('./../vendor/augment');\n\nvar Point = augment.defclass({\n  constructor: function(x, y){\n    x = x || 0;\n    y = y || 0;\n    \n    this.x = x;\n    this.y = y;\n  },\n  subtract: function(p){\n    this.x = this.x - p.x;\n    this.y = this.y - p.y;\n\n    return this;\n  },\n  add: function(p){\n    this.x = this.x + p.x;\n    this.y = this.y + p.y;\n\n    return this;\n  },\n  \n  toArray: function(){\n    return [this.x, this.y];\n  },\n  reset: function(){\n    this.set(0,0);\n  },\n  \n  lengthSq: function () {\n\n    return this.x * this.x + this.y * this.y;\n\n  },\n\n  length: function () {\n\n    return Math.sqrt( this.x * this.x + this.y * this.y );\n\n  },\n\n  divideScalar: function ( scalar ) {\n\n    if ( scalar !== 0 ) {\n\n      var invScalar = 1 / scalar;\n\n      this.x *= invScalar;\n      this.y *= invScalar;\n\n    } else {\n\n      this.x = 0;\n      this.y = 0;\n\n    }\n\n    return this;\n\n  },\n  \n  clone: function(){\n    return new Point(this.x, this.y);\n  },\n\n  normalize: function () {\n\n    return this.divideScalar( this.length() );\n\n  },\n  \n\n  set: function (x, y) {\n\n      this.x = x;\n      this.y = y;\n\n      return this;\n\n  }\n});\n\nPoint.ZERO = new Point();\n\nPoint.subtract = function(p1, p2){\n  var p11 = new Point(p1.x,p1.y);\n  var p22 = new Point(p2.x,p2.y);\n  return p11.clone().subtract(p22);\n};\n\nPoint.fromAngle = function(angle, magnitude){\n  var x = Math.cos(angle) * magnitude;\n  var y = Math.sin(angle) * magnitude;\n  return new Point(x, y);\n};\n\n\nmodule.exports = Point;","var augment = require('./../vendor/augment'),\n  Point = require('./../math/point');\n\nvar Rectangle = augment.defclass({\n  constructor: function(x, y, width, height){\n    x = x || 0;\n    y = y || 0;\n    width = width || 0;\n    height = height || 0;\n    \n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  },\n  clone: function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  },\n  \n  scaleWithPoint: function(point){\n    return this.scale(point.x, point.y);\n  },\n\n  scale: function(ratioX, ratioY){\n    if (typeof ratioY === 'undefined'){\n      ratioY = ratioX;\n    }\n\n    this.x = this.x * ratioX;\n    this.y = this.y * ratioY;\n    this.width = this.width * ratioX;\n    this.height = this.height * ratioY;\n\n    return this;\n  },\n\n  set: function (x, y, width, height) {\n\n      this.x = x;\n      this.y = y;\n      this.width = width;\n      this.height = height;\n\n      return this;\n\n  }\n});\n//bunch of getters\nObject.defineProperty(Rectangle.prototype, 'left', { get: function () { return this.x; } });\nObject.defineProperty(Rectangle.prototype, 'right', { get: function () { return this.x + this.width; } });\nObject.defineProperty(Rectangle.prototype, 'top', { get: function () { return this.y; } });\nObject.defineProperty(Rectangle.prototype, 'bottom', { get: function () { return this.y + this.height; } });\n\nObject.defineProperty(Rectangle.prototype, 'tl', {\n  get: function () { return new Point(this.x, this.y); },\n\n  set: function (value) {\n      this.x = value.x;\n      this.y = value.y;\n  }\n});\n\nObject.defineProperty(Rectangle.prototype, 'tr', { get: function () { return new Point(this.x + this.width, this.y); } });\nObject.defineProperty(Rectangle.prototype, 'bl', { get: function () { return new Point(this.x, this.bottom); } });\nObject.defineProperty(Rectangle.prototype, 'br', { get: function () { return new Point(this.right, this.bottom); } });\n\n\nObject.defineProperty(Rectangle.prototype, 'centerX', {\n    get: function () {\n        return this.x + this.halfWidth;\n    }\n});\n\nObject.defineProperty(Rectangle.prototype, 'centerY', {\n\n    get: function () {\n        return this.y + this.halfHeight;\n    }\n\n});\nObject.defineProperty(Rectangle.prototype, 'halfWidth', {\n\n  get: function () {\n      return Math.round(this.width / 2);\n  }\n\n});\n\nObject.defineProperty(Rectangle.prototype, 'halfHeight', {\n\n    get: function () {\n        return Math.round(this.height / 2);\n    }\n\n});\n\nmodule.exports = Rectangle;","var augment = require('./vendor/augment'),\n  glmatrix = require('./vendor/gl-matrix'),\n  Rectangle = require('./math/rectangle'),\n  Point = require('./math/point'),\n  CameraPan = require('./camera-pan');\n\nvar mat2d = glmatrix.mat2d;\n\nvar MinimapNavigator = augment.defclass({\n  constructor: function(minimap){\n\n    this.minimap = minimap;\n    minimap.interactive = true;\n    minimap.on('mousedown', this.handleMouseDown);\n    \n    this.camera = this.minimap.camera;\n    this.cameraPan = new CameraPan(this.minimap.camera);\n  },\n  handleMouseDown: function(eventData){\n    var obj = this.minimap;\n    obj.mouseup = obj.mouseupoutside = obj.touchend = obj.touchendoutside = this.handleMouseUp;\n    obj.mousemove = this.handleMouseMove;\n    \n    var position = this.mouseToGlobal(eventData.data.global)\n    this.cameraPan.startAt( -position.x, -position.y);\n  },\n\n  handleMouseUp: function(data){\n    var obj = this.minimap;\n    obj.mouseup = obj.mouseupoutside = obj.touchend = obj.touchendoutside = undefined;\n    obj.mousemove = undefined;\n    \n    this.cameraPan.end();\n  },\n\n  mouseToGlobal: function(global){\n    var position = this.minimap.toLocal( global);\n    position = new Point(position.x, position.y);\n    position = this.minimap.minimapToWorld(position);\n\n    return position;\n  },\n\n  handleMouseMove: function(eventData){\n    var position = this.mouseToGlobal(eventData.data.global)\n    this.cameraPan.applyPan(-position.x, -position.y);\n  },\n  \n  update: function(){\n    this.cameraPan.update();\n  }\n});\n\nmodule.exports = MinimapNavigator;\n","var augment = require('./vendor/augment'),\n  glmatrix = require('./vendor/gl-matrix'),\n  Rectangle = require('./math/rectangle'),\n  MinimapNavigator = require('./minimap-navigator'),\n  Point = require('./math/point');\n\nvar mat2d = glmatrix.mat2d;\n\nvar Minimap = augment(PIXI.Container, function(uber){\n  this.constructor = function(width, height, camera, options){\n    uber.constructor.apply(this, arguments);\n    this.camera = camera;\n    this.minimapDimensions = {width: width, height: height};\n    this.worldBoundRect = new Rectangle(0, 0, 100, 100);\n    this.viewportRect = new Rectangle(0, 0, 100, 100);\n    \n    this.items = [];\n    this.build();\n\n    this.navigator = new MinimapNavigator(this);\n  },\n\n\n  this.build = function(){\n    this.worldBounds = new PIXI.Graphics();\n    this.worldBounds.alpha = 0.5;\n    this.addChild(this.worldBounds);\n\n    this.viewport = new PIXI.Graphics();\n    this.viewport.alpha = 0.5;\n    this.addChild(this.viewport);\n\n    this.itemsLayer = new PIXI.Graphics();\n    this.addChild(this.itemsLayer);\n    \n    this.debugLayer = new PIXI.Graphics();\n    this.addChild(this.debugLayer);\n  },\n\n  this.add = function(object){\n    this.items.push(object);\n  },\n  \n  this.drawObjects = function(){\n    this.itemsLayer.clear();  \n\n    var item;\n    for(var i = 0, l = this.items.length; i<l; i++){\n      item = this.items[i];\n      \n      var bounds = item.getLocalBounds();\n      var w1 = 0\n      var h1 = 0\n      \n      if(item.anchor){\n        w1 = item.width * -item.anchor.x;\n        h1 = item.height * -item.anchor.y;  \n      }\n      \n      bounds = new Rectangle( item.x + w1, item.y + h1, item.width, item.height);\n      this.drawObject(bounds);  \n      \n    }\n  },\n  \n  this.drawObject = function(bounds){\n    var rect = this.worldRectToMinimap(bounds);\n    this.drawRect(this.itemsLayer, rect.x, rect.y, rect.width, rect.height, { color: 0x00ffff });\n  }\n\n  this.setWorldBounds = function(rect){\n    this.worldBoundRect = rect;\n  }\n  \n  this.update = function(){\n    this.navigator.update();\n    \n    this.viewportRect = this.camera.getViewport();\n    this.draw();\n  }\n  \n  /////////\n  //Core //\n  /////////\n\n  this.getWorldToMinimapRatio = function(){\n    var ratio = this.getRatios(this.minimapDimensions, this.worldBoundRect);\n    return { x: ratio.x, y: ratio.y }\n  }\n  \n  this.getRatios = function(base, world){\n    var baseWidth = base.width,\n        baseHeight = base.height,\n        worldWidth = world.width,\n        worldHeight = world.height;\n    \n    var x = baseWidth/worldWidth;\n    var y = baseHeight/worldHeight;\n    \n    var worldToMinimap = {\n      x: x,\n      y: y,\n      min: Math.min(x,y),\n      max: Math.max(x,y) \n    }\n\n    return worldToMinimap;\n  }\n\n  this.worldRectToMinimap = function(rect){\n    var ratio = this.getWorldToMinimapRatio();\n\n    var newRect = rect.clone();\n    newRect.tl = newRect.tl.subtract(this.worldBoundRect.tl);//align it to world center\n    newRect.scaleWithPoint(ratio);\n\n    return newRect;\n  }\n\n  this.minimapToWorld = function(point){\n    if(!(point instanceof Point) ){\n      point = new Point(point.x, point.y);\n    }\n    var p = point.toArray();\n    var mat = mat2d.identity([]);\n    var ratio = this.getWorldToMinimapRatio();\n    \n    mat2d.translate(mat, mat, [this.worldBoundRect.x, this.worldBoundRect.y ]);\n    mat2d.scale(mat, mat, [1/ratio.x, 1/ratio.y]);\n    glmatrix.vec2.transformMat2d(p, p, mat);\n    return new Point(p[0], p[1]);\n  }\n\n  this.worldPointToMinimap = function(point){\n    if(!(point instanceof Point) ){\n      point = new Point(point.x, point.y);\n    }\n    \n    var p = point.toArray();\n    var mat = mat2d.identity([]);\n    var ratio = this.getWorldToMinimapRatio();\n    \n    mat2d.scale(mat, mat, [ratio.x, ratio.y]);\n    mat2d.translate(mat, mat, [-this.worldBoundRect.x, -this.worldBoundRect.y ]);\n    \n    glmatrix.vec2.transformMat2d(p, p, mat);\n\n    return new Point(p[0], p[1]);\n  }\n\n\n  \n  ////////////\n  //Drawing //\n  ////////////\n  this.draw = function(){\n    this.drawViewport(this.viewportRect, 0xffff00);\n    this.drawWorldBounds(this.worldBoundRect, 0x000000);\n    \n    this.drawObjects();\n  }\n\n  this.drawViewport = function(bounds, color){\n    bounds = this.worldRectToMinimap(bounds);\n    var graphics = this.viewport;\n    this.viewport.position.set(bounds.x, bounds.y);\n    this.viewport.clear();\n    this.drawRect(this.viewport, 0,0, bounds.width, bounds.height, {color:color});\n  }\n  \n  this.drawWorldBounds = function(bounds, color){\n    var worldBoundsInMinimap = bounds.clone();\n    worldBoundsInMinimap.scaleWithPoint(this.getWorldToMinimapRatio());\n    this.worldBounds.clear();\n    \n    this.drawRect(this.worldBounds, 0,0, worldBoundsInMinimap.width, worldBoundsInMinimap.height, {color:color});\n    this.drawOrigin(this.worldBounds, -worldBoundsInMinimap.x, -worldBoundsInMinimap.y, worldBoundsInMinimap.width, worldBoundsInMinimap.height);\n  }\n\n  this.drawRect = function(g, x, y, width, height, options){\n    var options = options || {};\n    var color = options.hasOwnProperty('color') ? options.color : 0xffffff;\n    var center = options.center === true;\n    g.beginFill(color);\n    \n    if(center){\n      g.drawRect( x-width/2, y-height/2, width, height);\n    }else{\n      g.drawRect( x, y, width, height);\n    }\n    g.endFill();\n  },\n\n  this.drawOrigin = function(graphics, x, y, width, height){\n    var dx = x;\n    var dy = y; //flip\n    \n    graphics.lineStyle(1, 0xffffff, 1);\n    graphics.drawPolygon(x-dx,y, x+width- dx, y);\n    graphics.drawPolygon(x,y-dy, x, y + height-dy);\n  }\n\n});\n\n\n\nObject.defineProperties(Minimap.prototype, {\n  width: {\n    get: function (){ return this.minimapDimensions.width }\n  },\n  height: {\n    get: function (){ return this.minimapDimensions.height }\n  }\n});\n\nmodule.exports = Minimap;","var pixi = require('./pixi');\n\nmodule.exports = {\n  addContainerUpdates: function(){\n    pixi();\n  }\n};","var mixinUpdateFunctions = function(){\n  //post update loop for any container\n  PIXI.Container.prototype.update = function(){\n    \n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].update();\n    }\n  };\n  \n\n  //post update loop for any container\n  PIXI.Container.prototype.preUpdate = function(){\n    \n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].preUpdate();\n    }\n  };\n  \n  //post update loop for any container\n  PIXI.Container.prototype.postUpdate = function(){\n    if(this.body){\n      this.body.postUpdate();\n    }\n    \n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].postUpdate();\n    }\n  };\n \n};\n\n//mixinUpdateFunctions();\n\nmodule.exports = mixinUpdateFunctions;","(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) define(factory);\n    else if (typeof module === \"object\") module.exports = factory();\n    else global.augment = factory();\n}(this, function () {\n    \"use strict\";\n\n    var Factory = function () {};\n    var slice = Array.prototype.slice;\n\n    var augment = function (base, body) {\n        var uber = Factory.prototype = typeof base === \"function\" ? base.prototype : base;\n        var prototype = new Factory, properties = body.apply(prototype, slice.call(arguments, 2).concat(uber));\n        if (typeof properties === \"object\") for (var key in properties) prototype[key] = properties[key];\n        if (!prototype.hasOwnProperty(\"constructor\")) return prototype;\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    };\n\n    augment.defclass = function (prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    };\n\n    augment.extend = function (base, body) {\n        return augment(base, function (uber) {\n            this.uber = uber;\n            return body;\n        });\n    };\n\n    return augment;\n}));","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.2.2\n */\n\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n\n(function(_global) {\n  \"use strict\";\n\n  var shim = {};\n  if (typeof(exports) === 'undefined') {\n    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      shim.exports = {};\n      define(function() {\n        return shim.exports;\n      });\n    } else {\n      // gl-matrix lives in a browser, define its namespaces in global\n      shim.exports = typeof(window) !== 'undefined' ? window : _global;\n    }\n  }\n  else {\n    // gl-matrix lives in commonjs, define its namespaces in exports\n    shim.exports = exports;\n  }\n\n  (function(exports) {\n    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n\nif(!GLMAT_EPSILON) {\n    var GLMAT_EPSILON = 0.000001;\n}\n\nif(!GLMAT_ARRAY_TYPE) {\n    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\n}\n\nif(!GLMAT_RANDOM) {\n    var GLMAT_RANDOM = Math.random;\n}\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    GLMAT_ARRAY_TYPE = type;\n}\n\nif(typeof(exports) !== 'undefined') {\n    exports.glMatrix = glMatrix;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\n\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec2 = vec2;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\n\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n    var z = (GLMAT_RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec3 = vec3;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\n\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n        out[3] = a[3] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = GLMAT_RANDOM();\n    out[1] = GLMAT_RANDOM();\n    out[2] = GLMAT_RANDOM();\n    out[3] = GLMAT_RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec4 = vec4;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\n\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\nif(typeof(exports) !== 'undefined') {\n    exports.mat2 = mat2;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\nif(typeof(exports) !== 'undefined') {\n    exports.mat2d = mat2d;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\n\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n\nif(typeof(exports) !== 'undefined') {\n    exports.mat3 = mat3;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < GLMAT_EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&\n        Math.abs(eyey - centery) < GLMAT_EPSILON &&\n        Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + \n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n\nif(typeof(exports) !== 'undefined') {\n    exports.mat4 = mat4;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class Quaternion\n * @name quat\n */\n\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.quat = quat;\n}\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n  })(shim.exports);\n})(this);\n","var augment = require('./vendor/augment');\nvar Camera = require('./camera');\nvar Rectangle = require('./math/rectangle');\nvar Minimap = require('./minimap');\nvar CameraConstrain = require('./camera-constrain');\nvar Mixins = require('./mixins');\nvar assert = require('./assert');\n\nvar World = augment(PIXI.Container, function(uber){\n  \n  this.constructor = function(options){\n    uber.constructor.apply(this, arguments);\n\n    var x = options.x || 0;\n    var y = options.y || -options.height/2;\n    var screenWidth = options.screenWidth;\n    var screenHeight = options.screenHeight;\n    assert(screenWidth, 'You must provide a screen width');\n    assert(screenHeight, 'You must provide a screen height');\n\n    this.worldRectangle = new Rectangle(x, y, options.width, options.height)\n    this.camera = new Camera(screenWidth, screenHeight);\n    this.camera.viewCenterX = screenWidth/2;\n    this.camera.viewCenterY = screenHeight/2;\n    \n    this.camera.zoomPivotX = screenWidth/2;\n    this.camera.zoomPivotY = screenHeight/2;\n\n    this.cameraConstrain = new CameraConstrain({ worldBounds: this.worldRectangle });\n    this.cameraConstrain.active = options.constrain === true;\n\n    this._screenWidth = screenWidth;\n    this._screenHeight = screenHeight;\n    //this will hold all children that should be transformed by the camera\n    this.worldContainer = new PIXI.Container();\n    uber.addChild.call(this, this.worldContainer);\n    //any other child of this\n    \n    this._showMinimap = false;\n    //this.minimap = true;\n  }\n  \n  this.destroyMinimap = function(){\n    if(!this._minimapInstance) return;\n\n    this._minimapInstance = undefined;\n    this.removeGlobalChild(this._minimapInstance);\n  }\n\n  this.createMinimap = function(width, height){\n    if(this._minimapInstance) return;\n\n    var width = width || 300;\n    var height = height || 150;\n\n    var minimapInstance = new Minimap(width, height, this.camera);\n    minimapInstance.setWorldBounds(this.worldRectangle);\n    minimapInstance.position.set(this._screenWidth - width, this._screenHeight - height);\n    this.addGlobalChild(minimapInstance);\n\n    this._minimapInstance = minimapInstance;\n  }\n\n  this.setSize = function(width, height){\n    this.worldRectangle.width = width;\n    this.worldRectangle.height = height;\n  }\n\n  this.setScreenSize = function(screenWidth, screenHeight){\n    this._screenWidth = screenWidth;\n    this._screenHeight = screenHeight;\n    \n    this.camera.setScreenSize(this._screenWidth, this._screenHeight);\n  }\n  \n  this.addGlobalChild = function(child){\n    uber.addChild.call(this, child);\n  }\n  this.removeGlobalChild = function(child){\n    uber.removeChild.call(this, child);\n  }\n\n  this.addChild = function(child){\n    this.worldContainer.addChild(child);\n  }\n\n  this.removeChild = function(child){\n    this.worldContainer.removeChild(child);\n  }\n\n  this.update = function(){\n    //update & constrain the attached camera\n    this.camera.update();\n    this.cameraConstrain.update(this.camera);\n    \n    if(this.minimap){\n      this._minimapInstance.update();\n    }\n    \n    //check if the world mixed in the update method, which is handy on our children to follow\n    //the camera or whatever should be done durign each update\n    if(!World.__updateMixed) return;\n    \n    //Kickoff the update call to all children. We can now\n    //assume update is available on all children.\n    for (var i = 0, j = this.children.length; i < j; ++i){   \n      if(this.children[i]){\n        this.children[i].update();\n      }\n    }\n  };\n  \n  //override pixi's updateTransform, merge the camera transform values\n  //and then contine with updatig the children of this world\n  this.updateTransform = function(){\n    uber.updateTransform.call(this);\n    this.updateWorldTransform();\n  }\n  \n  this.updateWorldTransform = function(){\n    var ct = this.camera.transform;\n    var pt = this.worldTransform;\n    var wt = this.worldContainer.worldTransform;\n    \n    //this will merge the camera view with the world container transform (this is not recommened to do so, so just in case)\n    ct.prepend(pt);\n    \n    //console.log(pt, wt)\n    //debugger;\n    // temporary matrix variables\n    var a, d, tx, ty;\n\n    // lets do the fast version as we know there is no rotation..\n    a  = this.worldContainer.scale.x;\n    d  = this.worldContainer.scale.y;\n\n    tx = this.worldContainer.position.x - this.worldContainer.pivot.x * a;\n    ty = this.worldContainer.position.y - this.worldContainer.pivot.y * d;\n\n    wt.a  = a  * ct.a;\n    wt.b  = a  * ct.b;\n    wt.c  = d  * ct.c;\n    wt.d  = d  * ct.d;\n    wt.tx = tx * ct.a + ty * ct.c + ct.tx;\n    wt.ty = tx * ct.b + ty * ct.d + ct.ty;\n\n    for (var i = 0, j = this.worldContainer.children.length; i < j; ++i){\n      this.worldContainer.children[i].updateTransform();\n    }\n  };\n\n});\n\nWorld.mixinUpdates = function(){\n  World.__updateMixed = true;\n  Mixins.addContainerUpdates();\n}\n\nObject.defineProperty(World.prototype, 'minimap', {\n\n    get: function () {\n        return this._showMinimap;\n    },\n\n    set: function (value) {\n        this._showMinimap = value;\n        if(this._showMinimap){\n          this.createMinimap();  \n        }else{\n          this.destroyMinimap();\n        }\n        \n    }\n\n});\n\nmodule.exports = World;"],"sourceRoot":"./"}